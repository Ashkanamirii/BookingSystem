spring:
app:
  auth:
    tokenSecret: Yp3s6v9y$B&E)H@McQfThWmZq4t7w!z%C*F-JaNdRgUkXn2r5u8x/A?D(G+KbPeS #used https://www.allkeysgenerator.com/ to create the secret key ("512-bit" long)
    tokenExpirationMsec: 900000 #15 mins
    refreshTokenExpirationMsec: 10700000 #3 hours (2.97 exactly)
  oauth2:
    authorizedRedirectUris:
      - http://localhost:8080/oauth2/redirect
  redirections:
    baseUri: http://localhost:3000
    loginRedirect: /login
    verificationRedirect: /verify/account/
    resetPassRedirect: /reset/pass/

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_EMAIL}
    password: ${GMAIL_PASS}
    properties:
      mail:
        smtp:
          auth: true
          starttls.enable: true


#spring.datasource.url=jdbc:postgresql://ec2-54-220-53-223.eu-west-1.compute.amazonaws.com:5432/d3han8hkq49ogh
#spring.datasource.username=zdzitimnurhmkf
#spring.datasource.password=477e7fd79d528c0a6d436f5fc3f47a76bb54aa9ef07fed91c67bf43c2f9f4c3f
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql= true
#spring.datasource.driverClassName=org.postgresql.Driver
#spring.datasource.maxActive=10
#spring.datasource.maxIdle=5
#spring.datasource.minIdle=2
#spring.datasource.initialSize=5
#spring.datasource.removeAbandoned=true


#spring.datasource.url=jdbc:mysql://localhost:3306/booking_system?createDatabaseIfNotExist=true
#spring.datasource.username=root
#spring.datasource.password=Ashkan1885A!
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.show-sql= true
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect


#allowPublicKeyRetrieval=true

#spring.jpa.propertieshibernate.jdbc.lob.non_contextual_cration=true



# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
#spring.datasource.url=jdbc:postgresql://localhost:5432/springbootdb
#spring.datasource.username=postgres
#spring.datasource.password=postgres@123
#spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle=true
#spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
#spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
#spring.jpa.hibernate.ddl-auto=create-drop

# Naming strategy
#spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
#spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
